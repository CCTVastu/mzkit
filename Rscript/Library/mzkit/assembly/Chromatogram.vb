#Region "Microsoft.VisualBasic::9142e7df40420e443591c249015032d4, mzkit\Rscript\Library\mzkit\assembly\Chromatogram.vb"

    ' Author:
    ' 
    '       xieguigang (gg.xie@bionovogene.com, BioNovoGene Co., LTD.)
    ' 
    ' Copyright (c) 2018 gg.xie@bionovogene.com, BioNovoGene Co., LTD.
    ' 
    ' 
    ' MIT License
    ' 
    ' 
    ' Permission is hereby granted, free of charge, to any person obtaining a copy
    ' of this software and associated documentation files (the "Software"), to deal
    ' in the Software without restriction, including without limitation the rights
    ' to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    ' copies of the Software, and to permit persons to whom the Software is
    ' furnished to do so, subject to the following conditions:
    ' 
    ' The above copyright notice and this permission notice shall be included in all
    ' copies or substantial portions of the Software.
    ' 
    ' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    ' IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ' FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    ' AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    ' LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    ' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    ' SOFTWARE.



    ' /********************************************************************************/

    ' Summaries:


    ' Code Statistics:

    '   Total Lines: 285
    '    Code Lines: 215
    ' Comment Lines: 29
    '   Blank Lines: 41
    '     File Size: 10.80 KB


    ' Module ChromatogramTools
    ' 
    '     Constructor: (+1 Overloads) Sub New
    ' 
    '     Function: addOverlaps, asChromatogram, overlaps, overlapsMatrix, overlapsSummary
    '               overlapsTable, ReadData, scaleScanTime, setLabels, subset
    '               toChromatogram, topInto
    ' 
    '     Sub: PackData
    ' 
    ' /********************************************************************************/

#End Region

Imports System.IO
Imports System.Text
Imports BioNovoGene.Analytical.MassSpectrometry.Assembly
Imports BioNovoGene.Analytical.MassSpectrometry.Assembly.DataReader
Imports BioNovoGene.Analytical.MassSpectrometry.Math
Imports Microsoft.VisualBasic.CommandLine.Reflection
Imports Microsoft.VisualBasic.ComponentModel.DataSourceModel
Imports Microsoft.VisualBasic.Linq
Imports Microsoft.VisualBasic.Math
Imports Microsoft.VisualBasic.Math.SignalProcessing
Imports Microsoft.VisualBasic.Scripting.MetaData
Imports SMRUCC.Rsharp.Runtime
Imports SMRUCC.Rsharp.Runtime.Components
Imports SMRUCC.Rsharp.Runtime.Internal
Imports SMRUCC.Rsharp.Runtime.Internal.Object
Imports SMRUCC.Rsharp.Runtime.Interop
Imports ChromatogramTick = BioNovoGene.Analytical.MassSpectrometry.Math.Chromatogram.ChromatogramTick
Imports REnv = SMRUCC.Rsharp.Runtime

''' <summary>
''' A chromatogram is the trace generated by the detector 
''' signal and requires a carefully controlled flow rate
''' of the carrier gas (mobile phase) and a carefully 
''' controlled temperature of the column (stationary phase) 
''' to yield repeatable results.
''' </summary>
<Package("chromatogram")>
<RTypeExport("overlaps", GetType(ChromatogramOverlap))>
Module ChromatogramTools

    Sub New()
        Call ConsolePrinter.AttachConsoleFormatter(Of ChromatogramOverlap)(AddressOf overlapsSummary)
        Call Internal.Object.Converts.makeDataframe.addHandler(GetType(ChromatogramOverlap), AddressOf overlapsTable)
    End Sub

    Private Function overlapsTable(data As ChromatogramOverlap, args As list, env As Environment) As dataframe
        Dim summary As New dataframe With {
            .columns = New Dictionary(Of String, Array),
            .rownames = data.overlaps.Keys.ToArray
        }
        Dim seq = summary.rownames _
            .Select(Function(key) data(key)) _
            .ToArray

        summary.add("TIC", seq.Select(Function(t) t.TIC.Sum))
        summary.add("BPC", seq.Select(Function(t) t.maxInto))

        Return summary
    End Function

    Private Function overlapsSummary(data As ChromatogramOverlap) As String
        Dim text As New StringBuilder

        Call text.AppendLine($"Chromatogram Overlaps Of {data.length} files:")

        For Each file As String In data.overlaps.Keys
            Call text.AppendLine($"  {file} {data(file).scan_time.Length} scans")
        Next

        Return text.ToString
    End Function

    ''' <summary>
    ''' convert dataset to chromatography dataset
    ''' </summary>
    ''' <param name="scans">
    ''' can be a data sequence of ms1 scan object or rt 
    ''' scan time vector if the signal data parameter 
    ''' is assigned value.
    ''' </param>
    ''' <param name="env"></param>
    ''' <returns></returns>
    <ExportAPI("as.chromatogram")>
    <RApiReturn(GetType(Chromatogram), GetType(ChromatogramTick))>
    Public Function asChromatogram(<RRawVectorArgument>
                                   scans As Object,
                                   <RRawVectorArgument>
                                   Optional data As Object = Nothing,
                                   Optional env As Environment = Nothing) As Object

        Dim ms1 As pipeline = pipeline.TryCreatePipeline(Of ms1_scan)(scans, env, suppress:=True)

        If ms1.isError Then
            If data Is Nothing Then
                ms1 = pipeline.TryCreatePipeline(Of ChromatogramTick)(scans, env, suppress:=True)

                If ms1.isError Then
                    Return ms1.getError
                Else
                    Return ms1 _
                        .populates(Of ChromatogramTick)(env) _
                        .ToArray
                End If
            End If

            Dim scan_time As Double() = REnv.asVector(Of Double)(scans)
            Dim intensity As Double() = REnv.asVector(Of Double)(data)

            Return scan_time _
                .Select(Function(t, i)
                            Return New ChromatogramTick With {
                                .Time = t,
                                .Intensity = intensity(i)
                            }
                        End Function) _
                .ToArray
        End If

        Dim scan As ms1_scan() = ms1 _
            .populates(Of ms1_scan)(env) _
            .OrderBy(Function(ti) ti.scan_time) _
            .ToArray
        Dim chr As New Chromatogram With {
            .scan_time = scan.Select(Function(ti) ti.scan_time).ToArray,
            .TIC = scan.Select(Function(ti) ti.intensity).ToArray,
            .BPC = .TIC
        }

        Return chr
    End Function

    <ExportAPI("toChromatogram")>
    Public Function toChromatogram(ticks As ChromatogramTick()) As Chromatogram
        Return New Chromatogram With {
            .scan_time = ticks.Select(Function(t) t.Time).ToArray,
            .TIC = ticks.Select(Function(t) t.Intensity).ToArray,
            .BPC = .TIC
        }
    End Function

    <ExportAPI("add")>
    Public Function addOverlaps(overlaps As ChromatogramOverlap, name$, data As Chromatogram) As ChromatogramOverlap
        Call overlaps.overlaps.Add(name, data)
        Return overlaps
    End Function

    <ExportAPI("subset")>
    Public Function subset(overlaps As ChromatogramOverlap, names As String()) As ChromatogramOverlap
        Return overlaps(names)
    End Function

    <ExportAPI("topInto")>
    Public Function topInto(overlaps As ChromatogramOverlap, n As Integer) As ChromatogramOverlap
        Dim topNames = overlaps.getNames.OrderByDescending(Function(id) overlaps(id).maxInto).Take(n).ToArray
        Dim subset As New ChromatogramOverlap

        For Each id As String In topNames
            Call subset.overlaps.Add(id, overlaps(id))
        Next

        Return subset
    End Function

    ''' <summary>
    ''' set new labels to the chromatogram overlap data
    ''' </summary>
    ''' <param name="overlaps"></param>
    ''' <param name="names"></param>
    ''' <param name="env"></param>
    ''' <returns></returns>
    <ExportAPI("labels")>
    Public Function setLabels(overlaps As ChromatogramOverlap,
                              names As String(),
                              Optional env As Environment = Nothing) As ChromatogramOverlap

        Call overlaps.setNames(names, env)
        Return overlaps
    End Function

    <ExportAPI("scale_time")>
    Public Function scaleScanTime(overlaps As ChromatogramOverlap, Optional unit As String = "minute") As ChromatogramOverlap
        If LCase(unit) = "minute" Then
            Return New ChromatogramOverlap With {
                .overlaps = overlaps.overlaps _
                    .ToDictionary(Function(a) a.Key,
                                  Function(a)
                                      Return New Chromatogram With {
                                          .BPC = a.Value.BPC,
                                          .TIC = a.Value.TIC,
                                          .scan_time = a.Value.scan_time.AsVector / 60
                                      }
                                  End Function)
            }
        ElseIf LCase(unit) = "hour" Then
            Return New ChromatogramOverlap With {
                .overlaps = overlaps.overlaps _
                    .ToDictionary(Function(a) a.Key,
                                  Function(a)
                                      Return New Chromatogram With {
                                          .BPC = a.Value.BPC,
                                          .TIC = a.Value.TIC,
                                          .scan_time = a.Value.scan_time.AsVector / 60 / 60
                                      }
                                  End Function)
            }
        Else
            Return overlaps
        End If
    End Function

    <ExportAPI("overlapsMatrix")>
    Public Function overlapsMatrix(overlaps As ChromatogramOverlap, Optional dt As Double = 0.3) As Object
        Dim rulerRT As Double() = overlaps.UnionTimeSeq(dt)
        Dim matrix As New dataframe With {
            .columns = New Dictionary(Of String, Array)
        }

        Call matrix.add("RT", rulerRT)

        For Each chr As NamedValue(Of Chromatogram) In overlaps.EnumerateSignals
            Dim TIC As GeneralSignal = chr.Value.GetSignal(isbpc:=False)
            Dim line = Resampler.CreateSampler(TIC)(rulerRT).ToArray

            Call matrix.add(chr.Name, line)
        Next

        Return matrix
    End Function

    <ExportAPI("overlaps")>
    <RApiReturn(GetType(ChromatogramOverlap))>
    Public Function overlaps(<RRawVectorArgument> Optional TIC As Object = Nothing, Optional env As Environment = Nothing) As Object
        If TIC Is Nothing Then
            Return New ChromatogramOverlap
        End If

        If TypeOf TIC Is ChromatogramOverlap Then
            Return TIC
        End If

        If TypeOf TIC Is list Then
            Dim result As New ChromatogramOverlap

            For Each item In DirectCast(TIC, list).namedValues
                If Not TypeOf item.Value Is Chromatogram Then
                    Return Message.InCompatibleType(
                        require:=GetType(Chromatogram),
                        given:=item.Value.GetType,
                        envir:=env,
                        message:=$"item '{item.Name}' is not a chromatogram value."
                    )
                Else
                    result(item.Name) = item.Value
                End If
            Next

            Return result
        Else
            Dim overlapsData As pipeline = pipeline.TryCreatePipeline(Of Chromatogram)(TIC, env)
            Dim result As New ChromatogramOverlap

            If overlapsData.isError Then
                Return overlapsData.getError
            Else
                For Each item As SeqValue(Of Chromatogram) In overlapsData _
                    .populates(Of Chromatogram)(env) _
                    .SeqIterator

                    result(item.i) = item
                Next
            End If

            Return result
        End If
    End Function

    ''' <summary>
    ''' save the chrome overlaps data as the cdf data file
    ''' </summary>
    ''' <param name="overlaps"></param>
    ''' <param name="cdf"></param>
    <ExportAPI("write.pack")>
    Public Sub PackData(overlaps As ChromatogramOverlap, cdf As String)
        Using file As Stream = cdf.Open(FileMode.OpenOrCreate, doClear:=True, [readOnly]:=False)
            Call overlaps.SavePackData(file)
        End Using
    End Sub

    <ExportAPI("read.pack")>
    Public Function ReadData(cdf As String) As ChromatogramOverlap
        Using file As Stream = cdf.Open(FileMode.Open, doClear:=False, [readOnly]:=True)
            Return file.ReadPackData
        End Using
    End Function
End Module
