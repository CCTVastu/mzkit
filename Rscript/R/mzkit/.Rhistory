library(mzkit)
ions <- read.mgf("./neg.samples.mgf")
names(ions)
ions <- read.mgf("./neg.mzcloud.mgf")
names(ions)
help(q)
q()
total_string_length <- function(x) {
n_chars <- sapply(x, nchar)
browser()
sum(n_chars)
}
total_string_length(list())
help(rownames)
help(names)
help("colnames")
help(do.call)
help(.Internal)
library(mzkit)
library(mzkit)
library(mzkit)
help(reduce)
pi
library(mzkit)
library(mzkit)
ions <- read.mgf("D:/MassSpectrum-toolkits/DATA/test/HCD_profiles.txt");
ions
profiles <- ions[[1]]$ms2;
profiles
profile <- ions[[1]]$ms2;
peakwidth = 0.3
angle.threshold = 5
if (!(c("mz", "into") %in% colnames(profile))) {
stop("Invalid prpfile spectra data matrix object!");
}
mz <- as.numeric(as.vector(profile[, "mz"]));
into <- as.numeric(as.vector(profile[, "into"]));
mz
into
order(mz)
mz[order(mz)]
i <- order(mz);
mz <- mz[i];
into <- into[i];
mz
into
accumulates <- peak.accumulateLine(into);
accumulates
windowSlices <- slide.windows(win_size = 2, step = 1, mz = mz, into = into);
windowSlices
str(windowSlices)
cmz   <- c();
cinto <- c();
bmz   <- c();
binto <- c();
slide = windowSlices[[1]]
slide
p1 <- c(slide$mz[1], slide$into[1]);
p2 <- c(slide$mz[2], slide$into[2]);
p1
p2
a <- angle(p1, p2);
a
a <= angle.threshold
if (is.null(bmz)) {
bmz <- slide$mz;
binto <- slide$into;
} else {
bmz <- append(bmz, slide$mz[2]);
binto <- append(binto, slide$into[2]);
}
cmz   <- c();
cinto <- c();
bmz   <- c();
binto <- c();
for(slide in windowSlices) {
p1 <- c(slide$mz[1], slide$into[1]);
p2 <- c(slide$mz[2], slide$into[2]);
a <- angle(p1, p2);
if (a <= angle.threshold) {
# we get a spectra peak
i <- which.max(binto);
cmz <- append(cmz, bmz[i]);
cinto <- append(cinto, binto[i]);
bmz   <- c();
binto <- c();
} else {
if (is.null(bmz)) {
bmz <- slide$mz;
binto <- slide$into;
} else {
bmz <- append(bmz, slide$mz[2]);
binto <- append(binto, slide$into[2]);
}
}
}
if (length(bmz) > 0) {
# we get a spectra peak
i <- which.max(binto);
cmz <- append(cmz, bmz[i]);
cinto <- append(cinto, binto[i]);
}
mz
into
p1
p2
xydiff <- p2 - p1;
xydiff
atan2
help(atan2)
a <- atan2(xydiff[2], xydiff[1]);
a
a <- a * 180 / pi;
a
180 - (a - 90);
a
library(mzkit)
ions <- read.mgf("D:/MassSpectrum-toolkits/DATA/test/HCD_profiles.txt");
profile <- ions[[1]]$ms2;
centroid.2(profile)
library(mzkit)
ions <- read.mgf("D:/MassSpectrum-toolkits/DATA/test/HCD_profiles.txt");
profile <- ions[[1]]$ms2;
centroid.2(profile)
mz <- as.numeric(as.vector(profile[, "mz"]));
into <- as.numeric(as.vector(profile[, "into"]));
# reorder in asc order
i <- order(mz);
mz <- mz[i];
into <- into[i];
accumulates <- peak.accumulateLine(into);
windowSlices <- slide.windows(win_size = 2, step = 1, mz = mz, into = into);
cmz   <- c();
cinto <- c();
bmz   <- c();
binto <- c();
slide = windowSlices[[1]]
slide
p1 <- c(slide$mz[1], slide$into[1]);
p2 <- c(slide$mz[2], slide$into[2]);
a <- angle(p1, p2);
a
(a <= angle.threshold)
if (is.null(bmz)) {
bmz <- slide$mz;
binto <- slide$into;
} else {
bmz <- append(bmz, slide$mz[2]);
binto <- append(binto, slide$into[2]);
}
slide = windowSlices[[2]]
slide
p1 <- c(slide$mz[1], slide$into[1]);
p2 <- c(slide$mz[2], slide$into[2]);
a <- angle(p1, p2);
a
library(mzkit)
ions <- read.mgf("D:/MassSpectrum-toolkits/DATA/test/HCD_profiles.txt");
profile <- ions[[1]]$ms2;
centroid.2(profile)
library(mzkit)
ions <- read.mgf("D:/MassSpectrum-toolkits/DATA/test/HCD_profiles.txt");
profile <- ions[[1]]$ms2;
centroid.2(profile)
centroid.2(profile, angle.threshold = 0.5)
centroid.2(profile, angle.threshold = 0.1)
centroid.2(profile, angle.threshold = 0.1)
library(mzkit)
ions <- read.mgf("D:/MassSpectrum-toolkits/DATA/test/HCD_profiles.txt");
profile <- ions[[1]]$ms2;
centroid.2(profile, angle.threshold = 0.1)
ms2 <- centroid.2(profile, angle.threshold = 0.1)
write.csv(ms2, file ="D:/MassSpectrum-toolkits/Rscript/demo/mz_centroid.R", row.names = FALSE);
write.csv(ms2, file ="D:/MassSpectrum-toolkits/Rscript/demo/mz_centroid.csv", row.names = FALSE);
library(mzkit)
ions <- read.mgf("D:/MassSpectrum-toolkits/DATA/test/HCD_profiles.txt");
profile <- ions[[1]]$ms2;
library(mzkit)
setwd("C:/Users/Administrator/Downloads/SoftmaxMultinomialRegression-master")
setwd("C:/Users/Administrator/Downloads/SoftmaxMultinomialRegression-master")
install.packages("pracma")
source('C:/Users/Administrator/Downloads/SoftmaxMultinomialRegression-master/mysoftmaxImplem.R')
help(sample)
a = c("pooooo","erty","xxx","ffc","222","333","qqq","4234","fds")
sample(a, 3)
sample(a, 3, replace = FALSE)
sample(a, 3, replace = TRUE)
sample(a, 3, replace = TRUE)
sample(a, 3, replace = TRUE)
sample(a, 3, replace = TRUE)
sample(a, 3, replace = TRUE)
sample(a, 3, replace = TRUE)
sample(a, 3, replace = TRUE)
sample(a, 3, replace = TRUE)
sample.int(100, 3, replace = TRUE)
sample.int(100, 30, replace = TRUE)
sample.int(100, 30, replace = FALSE)
library(mzkit)
library(mzkit)
library(mzkit)
library(mzkit)
library(mzkit)
library(mzkit)
help(roxygen2::roxygenize)
help(roxygenize)
require(VisualBasic.R)
grouping
help(grouping)
profile = read.csv("E:/mzkit/Rscript/R/mzkit/test/profiles.csv")
profile
peakwidth = 0.3
intocutoff = 0.05
(!all(c("mz", "into") %in% colnames(profile)))
mz   = as.numeric(as.vector(profile[, "mz"]));
into = as.numeric(as.vector(profile[, "into"]));
mz
into
i    <- order(mz);
mz   <- mz[i];
into <- into[i];
i    <- (into / max(into)) >= intocutoff;
mz   <- mz[i];
into <- into[i];
mz
into
mzgroups = numeric.group(mz, assert = function(x, y) abs(x - y) <= peakwidth);
mzgroups
mz = mzgroups[[1]]
mz
i     = abs(mzi - mz) <= peakwidth;
i
mz
mz   = as.numeric(as.vector(profile[, "mz"]));
into = as.numeric(as.vector(profile[, "into"]));
# reorder in asc order
i    <- order(mz);
mz   <- mz[i];
into <- into[i];
i    <- (into / max(into)) >= intocutoff;
mz   <- mz[i];
into <- into[i];
mzgroups = numeric.group(mz, assert = function(x, y) abs(x - y) <= peakwidth);
cmz      = NULL;
cinto    = NULL;
mzi = mzgroups[[1]]
mzi
i     = abs(mzi - mz) <= peakwidth;
int   = into[i];
mzi   = mz[i];
i
mz
cmz   = append(cmz, mzi[which.max(int)]);
cinto = append(cinto, max(int));
mz
cmz
cinto
data.frame(mz = cmz, into = cinto);
profile
centroid.2 <- function(profile, peakwidth = 0.1, intocutoff = 0.05) {
if (!all(c("mz", "into") %in% colnames(profile))) {
stop("Invalid prpfile spectra data matrix object!");
}
mz   = as.numeric(as.vector(profile[, "mz"]));
into = as.numeric(as.vector(profile[, "into"]));
# reorder in asc order
i    <- order(mz);
mz   <- mz[i];
into <- into[i];
i    <- (into / max(into)) >= intocutoff;
mz   <- mz[i];
into <- into[i];
mzgroups = numeric.group(mz, assert = function(x, y) abs(x - y) <= peakwidth);
cmz      = NULL;
cinto    = NULL;
for(mzi in mzgroups) {
i     = abs(mzi - mz) <= peakwidth;
int   = into[i];
mzi   = mz[i];
cmz   = append(cmz, mzi[which.max(int)]);
cinto = append(cinto, max(int));
}
# we get a ms2 spectra peaks data in centroid mode
data.frame(mz = cmz, into = cinto);
}
centroid.2(profile )
centroid.2(profile , intocutoff = 0.01)
intocutoff=0.01
peakwidth=0.1
mz   = as.numeric(as.vector(profile[, "mz"]));
into = as.numeric(as.vector(profile[, "into"]));
# reorder in asc order
i    <- order(mz);
mz   <- mz[i];
into <- into[i];
i    <- (into / max(into)) >= intocutoff;
mz   <- mz[i];
into <- into[i];
mzgroups = numeric.group(mz, assert = function(x, y) abs(x - y) <= peakwidth);
cmz      = NULL;
cinto    = NULL;
mzgroups
mzi = mzgroups[[1]]
mzi
i     = abs(mzi - mz) <= peakwidth;
i
mzi
mz
i     = abs(mean(mzi) - mz) <= peakwidth;
i
centroid.2 <- function(profile, peakwidth = 0.1, intocutoff = 0.05) {
if (!all(c("mz", "into") %in% colnames(profile))) {
stop("Invalid prpfile spectra data matrix object!");
}
mz   = as.numeric(as.vector(profile[, "mz"]));
into = as.numeric(as.vector(profile[, "into"]));
# reorder in asc order
i    <- order(mz);
mz   <- mz[i];
into <- into[i];
i    <- (into / max(into)) >= intocutoff;
mz   <- mz[i];
into <- into[i];
mzgroups = numeric.group(mz, assert = function(x, y) abs(x - y) <= peakwidth);
cmz      = NULL;
cinto    = NULL;
for(mzi in mzgroups) {
i     = abs(mean(mzi) - mz) <= peakwidth;
int   = into[i];
mzi   = mz[i];
cmz   = append(cmz, mzi[which.max(int)]);
cinto = append(cinto, max(int));
}
# we get a ms2 spectra peaks data in centroid mode
data.frame(mz = cmz, into = cinto);
}
centroid.2(profile ,0.05,0.01)
centroid.2 <- function(profile, peakwidth = 0.1, intocutoff = 0.05) {
if (!all(c("mz", "into") %in% colnames(profile))) {
stop("Invalid prpfile spectra data matrix object!");
}
mz   = as.numeric(as.vector(profile[, "mz"]));
into = as.numeric(as.vector(profile[, "into"]));
# reorder in asc order
i    <- order(mz);
mz   <- mz[i];
into <- into[i];
i    <- (into / max(into)) >= intocutoff;
mz   <- mz[i];
into <- into[i];
mzgroups = numeric.group(mz, assert = function(x, y) abs(x - y) <= peakwidth);
cmz      = NULL;
cinto    = NULL;
for(mzi in mzgroups) {
i     = (mz >= min(mzi)) & (mz <= max(mzi));
int   = into[i];
mzi   = mz[i];
cmz   = append(cmz, mzi[which.max(int)]);
cinto = append(cinto, max(int));
}
# we get a ms2 spectra peaks data in centroid mode
data.frame(mz = cmz, into = cinto);
}
centroid.2(profile ,0.05,0.01)
order
library(mzkit)
load("test/peak_ms2.rda")
ls()
length(peak_ms2)
peak_ms2
MScluster
MScluster(peak_ms2 )
library(mzkit)
MScluster(peak_ms2 )
load("test/peak_ms2.rda")
MScluster(peak_ms2 )
tree = MScluster(peak_ms2 )
tree$`BIN-8`
peak_ms2[ tree$`BIN-8`]
peak_ms2[ tree$`BIN-14`]
library(mzkit)
load("test/peak_ms2.rda")
clusters = MScluster(peak_ms2, 0.8,0.5)
clusters
load("test/peak_ms2.rda")
ls()
require(mzkit)
ls()
names(peak_ms2)
MScluster(peak_ms2)
levenshtein.distance
levenshtein.distance("AAAAAAA","ATTTAAAAAAA", type = "distance")
levenshtein.distance("AAAATTTTAAA","ATTTAAAAAAA", type = "distance")
levenshtein.distance("AAAATTTTAAAAAAAAAA","ATTTAAAAAAA", type = "distance")
levenshtein.distance("AAAATTTTAAAAAAAAAA","ATTTAAAAAAAAA", type = "distance")
levenshtein.distance("AAAATTTTAAAAAAAAAA","AATATTTAAAAAAAAA", type = "distance")
max
require(VisualBasic.R);
x = c("TTTc","AAAc","TGGGG","ATTTG","TTTTTTT","ccccccTTT","AAAAcccc","TGTGGGGG","GGGGGcccc","ATATATTTTAA","cccccccG");
index = function(t1, t2) {
d = levenshtein.distance(t1, t2);
d = 1 - d / max(nchar(t1), nchar(t2));
if (d >= 0.8) {
0
} else if (d >= 0.5) {
1;
} else {
-1;
}
}
c = bcluster(x, index)
c = bclusterTree::bcluster(x, index)
c
x = c("TTTTTc","AAAc","TGGGG","ATTTG","TTTTTTT","ccccccTTT","AAAAcccc","TGTGGGGG","GGGGGcccc","ATATATTTTAA","cccccccG");
index = function(t1, t2) {
d = levenshtein.distance(t1, t2);
d = 1 - d / max(nchar(t1), nchar(t2));
if (d >= 0.6) {
0
} else if (d >= 0.3) {
1;
} else {
-1;
}
}
c = bclusterTree::bcluster(x, index)
c
for(name in names(c)) {
print(name);
print(x[c[[name]]]);
}
x = c("TTTTTc","AAAc","TGGGG","ATTTG","TTTTTTT",
"AAAAAAAA","ccccccccccc","GGGGGGGTGGGG","ccccccTTT",
"AAAAcccc","TGTGGGGG","GGGGGcccc","ATATATTTTAA",
"cccccccG","GGGGGGG","AAAAAATTTAA","ccccccTTccc"
);
index = function(t1, t2) {
d = levenshtein.distance(t1, t2);
d = 1 - d / max(nchar(t1), nchar(t2));
if (d >= 0.6) {
0
} else if (d >= 0.3) {
1;
} else {
-1;
}
}
c = bclusterTree::bcluster(x, index)
for(name in names(c)) {
print(name);
print(x[c[[name]]]);
}
index = function(t1, t2) {
d = levenshtein.distance(t1, t2);
d = 1 - d / max(nchar(t1), nchar(t2));
if (d >= 0.5) {
0
} else if (d >= 0.3) {
1;
} else {
-1;
}
}
c = bclusterTree::bcluster(x, index)
for(name in names(c)) {
print(name);
print(x[c[[name]]]);
}
require(VisualBasic.R);
x = c("TTTTTc","AAAc","TGGGG","ATTTG","TTTTTTT",
"AAAAAAAA","ccccccccccc","GGGGGGGTGGGG","ccccccTTT",
"AAAAcccc","TGTGGGGG","GGGGGcccc","ATATATTTTAA",
"cccccccG","GGGGGGG","AAAAAATTTAA","ccccccTTccc"
);
index = function(t1, t2) {
d = levenshtein.distance(t1, t2);
d = 1 - d / min(nchar(t1), nchar(t2));
if (d >= 0.5) {
0
} else if (d >= 0.3) {
1;
} else {
-1;
}
}
c = bclusterTree::bcluster(x, index)
for(name in names(c)) {
print(name);
print(x[c[[name]]]);
}
x = c("TTTTTc","AAAc","TGGGG","ATTTG","TTTTTTT",
"AAAAAAAA","ccccccccccc","GGGGGGGTGGGG","ccccccTTT",
"AAAAcccc","TGTGGGGG","GGGGGcccc","ATATATTTTAA",
"cccccccG","GGGGGGG","AAAAAATTTAA","ccccccTTccc"
);
index = function(t1, t2) {
d = levenshtein.distance(t1, t2);
d = 1 - d / ((nchar(t1) + nchar(t2)) / 2);
if (d >= 0.5) {
0
} else if (d >= 0.3) {
1;
} else {
-1;
}
}
c = bclusterTree::bcluster(x, index)
for(name in names(c)) {
print(name);
print(x[c[[name]]]);
}
library(mzkit)
mzkit::mgf.ion
